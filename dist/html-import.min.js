(function(){"use strict";window.HTMLImportElement=window.HTMLImportElement||function(){"use strict";function a(){return new Promise((t)=>setTimeout(t,0))}function b(t){return"[object HTMLScriptElement]"===Object.prototype.toString.call(t)}function c(t){return"[object HTMLTemplateElement]"===Object.prototype.toString.call(t)}function d(t,u){if(b(t))e(t,u);else for(let v of t.children)d(v,t)}function e(t,u){const v=document.createElement("script");f(t,v),v.text=t.text,t.src&&(v.src=t.src),u.removeChild(t)}function f(t,u){if(t.parentNode)return t.parentNode.insertBefore(u,t.nextSibling)}function g(t){return t.split("#")[0]}function h(t){return t.split("#")[1]}function i(t){t=g(t);const u=p.get(t);if(u)return u;const v=window.fetch(t).then((w)=>w.text());return p.set(t,v),v}function j(t,u,v,w){let x=t.getElementById(u);if(x||(x=k(t,u)),!x)throw new Error(`Could not find element #${u} in ${g(w)}`);if(x&&c(x)&&x.content){if(v)throw new Error(`Imported element #${u} and found it to be a template, which cannot be renamed to ${v} as specified in the 'as' attribute`);return m(x.content)}return v&&(x=x.cloneNode(!0),x.id=v),document.importNode(x,!0)}function k(t,u){const v=t.querySelectorAll("template");for(let w of v){const x=w.content.getElementById(u);if(x)return x}}function l(t){return m(t.body)}function m(t){if(!t)throw new Error("Missing sourceElement");const u=document.createDocumentFragment(),v=t.children;for(let w of v){const x=document.importNode(w,!0);u.appendChild(x)}return u}function n(t){const u=[];for(let v of t){const w=a().then(()=>v.ready);u.push(w)}return Promise.all(u)}function o(t,u,v,w){const x=new DOMParser,y=x.parseFromString(t,"text/html");return u?j(y,u,v,w):l(y)}const p=new Map,q=Symbol(),r=Symbol();class s extends HTMLElement{constructor(t){return t=super(t),t.ready=new Promise((u,v)=>{t[q]=u,t[r]=v}),t}connectedCallback(){const t=this.hasAttribute("src");if(!t)return this[r](new Error("The 'src' attribute is required"));const u=this.getAttribute("src");if(!u)return this[r](new Error("The 'src' attribute is empty"));const v=this.hasAttribute("as"),w=this.getAttribute("as");if(v&&!w)return this[r](new Error("The 'as' attribute was defined, but it is empty"));const x=h(u);return w&&!x?this[r](new Error("The 'as' attribute was defined, but src attribute is not targeting an element")):void this[q](i(u).then((y)=>o(y,x,w,u)).then((y)=>{var z=y.querySelectorAll("html-import");return d(y,this),f(this,y),n(z)}))}}return customElements.define("html-import",s),s}()})();
